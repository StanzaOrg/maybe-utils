#use-added-syntax(tests)
defpackage maybe-utils/test:
  import maybe-utils
  import core

defn None<T> () -> Maybe<T>:
  None()

defn #EXPECT-THROWS (f: () -> ?) -> False:
  var threw?: True|False = false
  try:
    f()
  catch (e: Exception):
    threw? = true
  #EXPECT(threw?)

deftest and?:
  #EXPECT(One(1) $> and?{_, One(2)} == One(2))
  #EXPECT(One(1) $> and?{_, None()} == None())
  #EXPECT(None() $> and?{_, One(2)} == None())
  #EXPECT(None() $> and?{_, None()} == None())

deftest and-then:
  #EXPECT(One(1) $> and-then{_, One} == One(1))
  #EXPECT(One(1) $> and-then{_, None{}} == None())
  #EXPECT(None() $> and-then{_, One} == None())
  #EXPECT(None() $> and-then{_, None{}} == None())

deftest contains?:
  #EXPECT(One(1) $> contains?{_, 1} == true)
  #EXPECT(One(1) $> contains?{_, 2} == false)
  #EXPECT(None() $> contains?{_, 1} == false)

deftest expect:
  #EXPECT(One(1) $> expect{_, "value is there"} == 1)

  ; Will cause a fatal
  ;if None() $> expect{_, "value is there"} == 1:
  ;  println("Bad!")

deftest filter:
  defn positive? (v: Int) -> True|False: (v > 0)

  #EXPECT(One( 1) $> filter{_, positive?} == One(1))
  #EXPECT(One(-1) $> filter{_, positive?} == None())
  #EXPECT(None()  $> filter{_, positive?} == None())

deftest flatten:
  #EXPECT(One(One(1)) $> flatten == One(1))
  #EXPECT(One(None()) $> flatten == None())
  #EXPECT(None()      $> flatten == None())

deftest map:
  #EXPECT(One(1) $> map{_, to-string} == One("1"))
  #EXPECT(None() $> map{_, to-string} == None())

deftest map-or:
  #EXPECT(One(1) $> map-or{_, "", to-string} == "1")
  #EXPECT(None() $> map-or{_, "", to-string} == "")

deftest map-or-else:
  #EXPECT(One(1) $> map-or-else{_, {""}, to-string} == "1")
  #EXPECT(None() $> map-or-else{_, {""}, to-string} == "")

deftest or?:
  #EXPECT(One(1) $> or?{_, One(2)} == One(1))
  #EXPECT(One(1) $> or?{_, None()} == One(1))
  #EXPECT(None() $> or?{_, One(2)} == One(2))
  #EXPECT(None() $> or?{_, None()} == None())

deftest or-else:
  #EXPECT(One(1) $> or-else{_, {One('2')}} == One(1))
  #EXPECT(None() $> or-else{_, {One('2')}} == One('2'))

deftest or-throw:
  #EXPECT(One(1) $> or-throw{_, Exception("Woah!")} == One(1))
  #EXPECT-THROWS(fn (): None() $> or-throw{_, Exception("Woah!")})

deftest value-or:
  #EXPECT(One(1) $> value-or{_, 'a'} == 1)
  #EXPECT(None() $> value-or{_, 'a'} == 'a')

deftest value-or-throw:
  #EXPECT(One(1) $> value-or-throw{_, Exception("Woah!")} == 1)
  #EXPECT-THROWS(fn (): None() $> value-or-throw{_, Exception("Woah!")})

deftest value-or-else:
  #EXPECT(One(1) $> value-or-else{_, {'2'}} == 1)
  #EXPECT(None<Int>() $> value-or-else{_, {'2'}} == '2')

deftest to-seq:
  #EXPECT(One(1) $> to-seq $> to-tuple == [1])
  #EXPECT(None() $> to-seq $> to-tuple == [])

defstruct Base <: Equalable
defstruct Derived <: Base
defmethod equal? (a: Base, b: Base): (true)

