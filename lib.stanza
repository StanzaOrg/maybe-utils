defpackage maybe-utils:
  import core

doc: \<doc>
If `v1` contains a value, return `v2`. Otherwise, return `None()`.

```
#EXPECT(One(1) $> and?{_, One(2)} == One(2))
#EXPECT(One(1) $> and?{_, None()} == None())
#EXPECT(None() $> and?{_, One(2)} == None())
#EXPECT(None() $> and?{_, None()} == None())
```
<doc>
public defn and?<?T, ?U> (v1: Maybe<?T>, v2: Maybe<?U>) -> Maybe<U>:
  match(v1):
    (v1: One<T>): v2
    (v1: None): None()

doc: \<doc>
If `v` has an inner value, apply the given function `f` to it to produce
another `Maybe`, then flatten the result.

```
defn positive? (x: Int) -> Maybe<Int>:
  if x > 0: (One(x)) else: (None())

#EXPECT(One( 1) $> and-then{_, positive?} == One(1))
#EXPECT(One(-1) $> and-then{_, positive?} == None())
#EXPECT(None()  $> and-then{_, positive?} == None())
```
<doc>
public defn and-then<?T, ?R> (v: Maybe<?T>, f: T -> Maybe<?R>) -> Maybe<R>:
  match(v):
    (v: One<T>): f(value!(v))
    (v: None): None()

doc: \<doc>
Return `true` if `v` contains the given value `x`.

```
#EXPECT(One(1) $> contains?{_, 1} == true)
#EXPECT(One(1) $> contains?{_, 2} == false)
#EXPECT(None() $> contains?{_, 1} == false)
```
<doc>
public defn contains?<?T> (v: Maybe<?T&Equalable>, x: ?T&Equalable) -> True|False:
  match(v):
    (v: One<T>): value!(v) as T&Equalable == x
    (v: None): false

doc: \<doc>
Obtain the inner value of `v`, or `fatal()` with the given `msg` if no value
exists.

```
#EXPECT(One(1) $> expect{_, "No value!"} == 1)
; None() $> expect{_, "No value!"} will crash with `fatal("No value!")`
```
<doc>
public defn expect<?T> (v: Maybe<?T>, msg: Printable|String) -> T:
  match(v):
    (v: One<T>): value!(v)
    (v: None): fatal("%_" % [msg])

doc: \<doc>
Filter the inner value of `v` according to the given predicate `pred`. If it
does not satisfy the predicate, or there is no value, return `None()`,
otherwise return `v` unchanged.

```
defn positive? (v: Int) -> True|False: (v > 0)
#EXPECT(One( 1) $> filter{_, positive?} == One(1))
#EXPECT(One(-1) $> filter{_, positive?} == None())
#EXPECT(None()  $> filter{_, positive?} == None())
```
<doc>
public defn filter<?T> (v: Maybe<?T>, pred: T -> True|False) -> Maybe<T>:
  match(v: One):
    if pred(value!(v)):
      v
    else:
      None()
  else:
    None()

doc: \<doc>
Flatten a nested `Maybe` to remove the outer layer.

```
#EXPECT(One(One(1)) $> flatten == One(1))
#EXPECT(One(None()) $> flatten == None())
#EXPECT(None()      $> flatten == None())
```
<doc>
public defn flatten<?T> (v: Maybe<Maybe<?T>>) -> Maybe<T>:
  match(v):
    (v: One): value!(v)
    (v: None): None()

doc: \<doc>
Apply the given function `f` to the inner value of `v`, if one exists.

```
#EXPECT(One(1) $> map{_, fn (x): x + 1} == 2)
#EXPECT(None() $> map{_, fn (x): x + 1} == None())
```
<doc>
public defn map<?T, ?R> (v: Maybe<?T>, f: T -> ?R) -> Maybe<R>:
  match(v):
    (v: One<T>): One(f(value!(v)))
    (v: None): None()

doc: \<doc>
Apply the given function `f` to the inner value of `v`, if one exists, then
return the mapped value. Otherwise, return the given default `d`.

```
#EXPECT(One(1) $> map-or{_, "", to-string} == "1")
#EXPECT(None() $> map-or{_, "", to-string} == "")
```
<doc>
public defn map-or<?T, ?D, ?R> (v: Maybe<?T>, d: ?D, f: T -> ?R) -> R|D:
  match(v):
    (v: One<T>): f(value!(v))
    (v: None): d

doc: \<doc>
Apply the given function `f` to the inner value of `v`, if one exists, then
return the mapped value. Otherwise, return the given default `d`.

```
#EXPECT(One(1) $> map-or-else{_, {""}, to-string} == "1")
#EXPECT(None() $> map-or-else{_, {""}, to-string} == "")
```
<doc>
public defn map-or-else<?T, ?D, ?R> (v: Maybe<?T>, d: () -> ?D, f: T -> ?R) -> R|D:
  match(v):
    (v: One<T>): f(value!(v))
    (v: None): d()

doc: \<doc>
If `v1` contains a value, return `v1` unchanged, otherwise return `v2`.

```
#EXPECT(One(1) $> or?{_, One(2)} == One(1))
#EXPECT(One(1) $> or?{_, None()} == One(1))
#EXPECT(None() $> or?{_, One(2)} == One(2))
#EXPECT(None() $> or?{_, None()} == None())
```
<doc>
public defn or?<?T, ?U> (v1: Maybe<?T>, v2: Maybe<?U>) -> Maybe<T|U>:
  match(v1):
    (v1: One<T>): v1
    (v1: None): v2

doc: \<doc>
If `v` contains a value, return `v` unchanged, otherwise return the computed
value of the given function `d`.

```
#EXPECT(One(1) $> or-else{_, {One('2')}} == One(1))
#EXPECT(None() $> or-else{_, {One('2')}} == One('2'))
```
<doc>
public defn or-else<?T, ?D> (v: Maybe<?T>, d: () -> Maybe<?D>) -> Maybe<T|D>:
  match(v):
    (v: One<T>): v
    (v: None): d()

doc: \<doc>
If `v` contains a value, return `v` unchanged, otherwise throw the given
exception `e`.

```
#EXPECT(One(1) $> or-throw{_, Exception("woah!")} == One(1))
; None() $> or-throw{_, Exception("woah!")} will throw Exception("woah!")
```
<doc>
public defn or-throw<?T> (v: Maybe<?T>, e: Exception) -> Maybe<T>:
  match(v):
    (v: One<T>): v
    (v: None): throw(e)

doc: \<doc>
Obtain the inner value of `v`, if one exists, otherwise return the given
default `d`.

```
#EXPECT(One(1) $> value-or{_, '2'} == 1)
#EXPECT(None() $> value-or{_, '2'} == '2')
```
<doc>
public defn value-or<?T, ?D> (v: Maybe<?T>, d: ?D) -> T|D:
  match(v):
    (v: One<T>): value!(v)
    (v: None): d

doc: \<doc>
Obtain the inner value of `v`, if one exists, otherwise compute one using the
given function `f`.

```
#EXPECT(One(1) $> value-or-else{_, {'2'}) == 1)
#EXPECT(None() $> value-or-else{_, {'2'}) == '2')
```
<doc>
public defn value-or-else<?T, ?D> (v: Maybe<?T>, f: () -> ?D) -> T|D:
  match(v):
    (v: One<T>): value!(v)
    (v: None): f()

doc: \<doc>
Obtain the inner value of `v`, if one exists, otherwise throw the given
exception `e`.

```
#EXPECT(One('a') $> value-or-throw{_, Exception("Woah!")} == 'a')
; None()   $> value-or-throw{_, Exception("Woah!")} will throw Exception("Woah!")
```
<doc>
public defn value-or-throw<?T> (v: Maybe<?T>, e: Exception) -> T:
  match(v):
    (v: One<T>): value!(v)
    (v: None): throw(e)

doc: \<doc>
Obtain the inner value of `v`, if one exists, otherwise call the given `return`
function. Intended for use with the `label<...> return:` construct.

```
defn parse (s: String) -> Maybe<[Int, Int, Int]>:
  label<Maybe<[Int, Int, Int]>> return:
    val components = to-tuple $ split(s, ".")
    defn component? (index: Int) -> Int:
      components[index] $> to-int $> to-maybe $> value-or-return{_, return}

    switch(length(components)):
      3: One([component?(0), component?(1), component?(2)])
      else: None()

#EXPECT(parse("1.2.3") == One([1, 2, 3]))
#EXPECT(parse("1.2.foo") == None())
#EXPECT(parse("a.2.foo") == None())
#EXPECT(parse("foo") == None())
<doc>
public defn value-or-return<?T> (v: Maybe<?T>, return: Maybe<?> -> Void) -> T:
  match(v):
    (v: One<T>): value!(v)
    (v: None): return(None())

doc: \<doc>
Obtain a `Seq<T>` that yields one element if the given value `v` has an inner
value, otherwise a `Seq<T>` that yields no elements.

```
#EXPECT(One(1) $> to-seq $> to-tuple == [1])
#EXPECT(None() $> to-seq $> to-tuple == [])
```
<doc>
public defn to-seq<?T> (v: Maybe<?T>) -> Seq<T>:
  var inner: Maybe<T> = v
  new Seq<T>:
    defmethod next (this) -> T:
      val ret = value!(inner)
      inner = None()
      ret

    defmethod empty? (this) -> True|False:
      inner is None

public defn to-maybe<?T> (v: ?T|False) -> Maybe<T>:
  match(v):
    (v: False): None()
    (v: T): One(v)

public defn into?<To, ?From> (v: Maybe<?From>) -> Maybe<To>:
  match(v: One):
    match(value!(v)):
      (v: To): One(v)
      (_): None()
  else:
    None()
